/*
 * This file is generated by jOOQ.
 */
package com.vominh.example.jooq.generate.tables;


import com.vominh.example.jooq.generate.Keys;
import com.vominh.example.jooq.generate.Public;
import com.vominh.example.jooq.generate.tables.records.DeviceRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Device extends TableImpl<DeviceRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.device</code>
     */
    public static final Device DEVICE = new Device();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DeviceRecord> getRecordType() {
        return DeviceRecord.class;
    }

    /**
     * The column <code>public.device.id</code>.
     */
    public final TableField<DeviceRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.device.serial</code>.
     */
    public final TableField<DeviceRecord, Integer> SERIAL = createField(DSL.name("serial"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.device.name</code>.
     */
    public final TableField<DeviceRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.device.version</code>.
     */
    public final TableField<DeviceRecord, Integer> VERSION = createField(DSL.name("version"), SQLDataType.INTEGER, this, "");

    private Device(Name alias, Table<DeviceRecord> aliased) {
        this(alias, aliased, null);
    }

    private Device(Name alias, Table<DeviceRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.device</code> table reference
     */
    public Device(String alias) {
        this(DSL.name(alias), DEVICE);
    }

    /**
     * Create an aliased <code>public.device</code> table reference
     */
    public Device(Name alias) {
        this(alias, DEVICE);
    }

    /**
     * Create a <code>public.device</code> table reference
     */
    public Device() {
        this(DSL.name("device"), null);
    }

    public <O extends Record> Device(Table<O> child, ForeignKey<O, DeviceRecord> key) {
        super(child, key, DEVICE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<DeviceRecord> getPrimaryKey() {
        return Keys.PK_DEVICE;
    }

    @Override
    public Device as(String alias) {
        return new Device(DSL.name(alias), this);
    }

    @Override
    public Device as(Name alias) {
        return new Device(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Device rename(String name) {
        return new Device(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Device rename(Name name) {
        return new Device(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, Integer, String, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
